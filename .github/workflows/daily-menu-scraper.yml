name: Daily Menu Scraper

on:
  schedule:
    # Run every day at 10:30 AM UTC (11:30/12:30 CET depending on DST)
    - cron: '30 10 * * *'
  workflow_dispatch: # Allow manual triggering
  push:
    branches: [ main ]
    paths: [ 'python.py', '.github/workflows/daily-menu-scraper.yml' ]

jobs:
  scrape-and-release:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # No external dependencies needed - using built-in libraries
        
    - name: Run menu scraper
      id: scrape
      run: |
        python python.py
        
        # Set output variables for later steps
        TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
        DATE_HUMAN=$(date +"%Y-%m-%d %H:%M UTC")
        echo "timestamp=$TIMESTAMP" >> $GITHUB_OUTPUT
        echo "date_human=$DATE_HUMAN" >> $GITHUB_OUTPUT
        
        # Find the latest JSON file
        JSON_FILE=$(ls -t eurest_menu_*.json | head -n1)
        echo "json_file=$JSON_FILE" >> $GITHUB_OUTPUT
        
        # Check if scraping was successful
        if [ -f "$JSON_FILE" ]; then
          ITEM_COUNT=$(python -c "import json; data=json.load(open('$JSON_FILE')); print(data.get('total_items', 0))")
          echo "item_count=$ITEM_COUNT" >> $GITHUB_OUTPUT
          echo "✅ Scraping successful: $ITEM_COUNT items found"
        else
          echo "❌ Scraping failed: No JSON file found"
          exit 1
        fi
        
    - name: Generate HTML website
      run: |
        python generate_website.py ${{ steps.scrape.outputs.json_file }}
        
    - name: Create release archive
      run: |
        mkdir -p release
        cp *.html release/
        cp *.css release/ 2>/dev/null || true
        cp *.js release/ 2>/dev/null || true
        cp ${{ steps.scrape.outputs.json_file }} release/latest_menu.json
        
        # Create a simple info file
        cat > release/info.txt << EOF
        Eurest Kaserne Timeout Menu
        Generated: ${{ steps.scrape.outputs.date_human }}
        Items found: ${{ steps.scrape.outputs.item_count }}
        Source: https://clients.eurest.ch/kaserne/de/Timeout
        EOF
        
        # Create archive
        cd release
        tar -czf ../eurest-menu-website.tar.gz *
        cd ..
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: menu-${{ steps.scrape.outputs.timestamp }}
        name: "Daily Menu - ${{ steps.scrape.outputs.date_human }}"
        body: |
          ## 🍽️ Eurest Kaserne Timeout - Daily Menu
          
          **Generated:** ${{ steps.scrape.outputs.date_human }}  
          **Menu Items Found:** ${{ steps.scrape.outputs.item_count }}  
          **Source:** https://clients.eurest.ch/kaserne/de/Timeout
          
          ### 📁 Files Included:
          - `index.html` - Main menu website
          - `latest_menu.json` - Raw menu data
          - `info.txt` - Generation details
          
          ### 🚀 Quick Deploy:
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/menu-${{ steps.scrape.outputs.timestamp }}/eurest-menu-website.tar.gz
          tar -xzf eurest-menu-website.tar.gz
          # Copy files to your web server
          ```
          
          ---
          *Automatically generated by GitHub Actions*
        files: |
          eurest-menu-website.tar.gz
          release/index.html
          release/latest_menu.json
        draft: false
        prerelease: false
        
    - name: Update latest release pointer
      run: |
        # Create a simple file that points to the latest release
        echo "menu-${{ steps.scrape.outputs.timestamp }}" > latest_release.txt
        
    - name: Commit latest release pointer
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add latest_release.txt
        git diff --staged --quiet || git commit -m "Update latest release pointer to menu-${{ steps.scrape.outputs.timestamp }}"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
